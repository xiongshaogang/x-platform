<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd"
	default-autowire="byName" default-lazy-init="false">
	<!-- 自动扫描dao和service包(自动注入) -->
	<context:component-scan base-package="com.xplatform.base.**.aop" />
	<context:component-scan base-package="com.xplatform.base.**.dao.impl" />
	<context:component-scan base-package="com.xplatform.base.**.service.impl" />
	<context:component-scan base-package="com.xplatform.base.**.service" />

	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:dbconfig.properties" />
	<!-- 配置数据源1 -->
	<bean name="dataSource_pool" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<!-- <property name="poolPreparedStatements" value="true" /> <property 
			name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->
		<property name="validationQuery" value="${validationQuery.sqlserver}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 开启Druid的监控统计功能 -->
		<property name="filters" value="stat" />
		<!--<property name="filters" value="mergeStat" /> -->
		<!-- Oracle连接是获取字段注释 -->
		<property name="connectProperties">
			<props>
				<prop key="remarksReporting">true</prop>
			</props>
		</property>
	</bean>

	<!-- 数据源集合 -->
	<bean id="dataSource"
		class="com.xplatform.base.framework.core.extend.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="com.xplatform.base.framework.core.extend.datasource.DataSourceType">
				<entry key="dataSource_pool" value-ref="dataSource_pool" />
				<!-- <entry key="mapdataSource" value-ref="mapdataSource" /> -->
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSource_pool" />
	</bean>
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="entityInterceptor" ref="hiberAspect" />
		<property name="hibernateProperties">
			<props>
				<!--<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
			</props>
		</property>
		<!-- 注解方式配置 -->
		<property name="packagesToScan">
			<list>
				<value>com.xplatform.base.**.entity</value>
			</list>
		</property>
	</bean>


	<!-- JDBC配置 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<!-- JDBC配置 -->
	<bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>

	<!-- 配置事物管理器，在*ServiceImpl里写@Transactional就可以启用事物管理 -->
	<bean name="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 
	<tx:annotation-driven transaction-manager="transactionManager" />
	 -->
	<aop:aspectj-autoproxy />
	<aop:config>
		<aop:pointcut expression="execution(* com.xplatform.base..service.*.*(..)) or execution(* com.ucg.oa..service.*.*(..))" id="txAop" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txAop" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		    <!-- 让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务 -->
			<tx:method name="*" propagation="REQUIRED" read-only="true"/>
			<!-- 添加 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<!-- 更新 -->
			<tx:method name="change*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<!-- 删除 -->
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<!-- 移动 -->
			<tx:method name="move*" propagation="REQUIRED" />
			<!-- 复制 -->
			<tx:method name="copy*" propagation="REQUIRED" />
			<!-- 导入 -->
			<tx:method name="import*" propagation="REQUIRED" />
			<!-- 停止与激活 -->
			<tx:method name="stop*" propagation="REQUIRED" />
			<tx:method name="active*" propagation="REQUIRED" />
			<!-- 执行 -->
			<tx:method name="db*" propagation="REQUIRED" />
			<tx:method name="execute*" propagation="REQUIRED" />
			<!-- 发布 -->
			<tx:method name="deploy*" propagation="REQUIRED" />
			<!-- 取消 -->
			<tx:method name="cancel*" propagation="REQUIRED" />
			<!-- 批量操作 -->
			<tx:method name="batch*" propagation="REQUIRED" />
			<!-- 初始化操作 -->
			<tx:method name="init*" propagation="REQUIRED" />
			<!-- 同步操作 -->
			<tx:method name="sync*" propagation="REQUIRED" />
			<!-- 开始操作 -->
			<tx:method name="start*" propagation="REQUIRED" />
			<!-- 结束操作 -->
			<tx:method name="end*" propagation="REQUIRED" />
			<!-- 往下流转操作 -->
			<tx:method name="next*" propagation="REQUIRED" />
			<!-- 发送消息操作 -->
			<tx:method name="send*" propagation="REQUIRED" />
			<tx:method name="notify*" propagation="REQUIRED" />
			<!-- 行为 -->
			<tx:method name="do*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	

	<!-- JSR303 Validator定义 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
</beans>