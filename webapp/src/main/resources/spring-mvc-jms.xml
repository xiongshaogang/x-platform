<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:amq="http://activemq.apache.org/schema/core"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">
	
	<!-- QUARTZ 2.0配置的问题 -->
	<bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
		lazy-init="false" destroy-method="destroy">
		<property name="autoStartup" value="true" />
		<property name="waitForJobsToCompleteOnShutdown" value="false" />
		<property name="dataSource" ref="dataSource" />
		<property name="overwriteExistingJobs" value="true" />
		<property name="startupDelay" value="60"></property>
		<property name="jobFactory">  
            <bean class="org.quartz.simpl.SimpleJobFactory"></bean>  
        </property>  
		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.scheduler.instanceName">ClusteredScheduler</prop>
				<prop key="org.quartz.scheduler.instanceId">AUTO</prop>
				<prop key="org.quartz.scheduler.skipUpdateCheck">true</prop>
				
				<prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
				<prop key="org.quartz.threadPool.threadCount">5</prop>
				<prop key="org.quartz.threadPool.threadPriority">5</prop>
				
				<prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
				<prop key="org.quartz.jobStore.driverDelegateClass">${quartz.jdbcjobstore}</prop>
				<prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
				<prop key="org.quartz.jobStore.useProperties">false</prop>
				<prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>
				
				<prop key="org.quartz.jobStore.isClustered">false</prop>
				<prop key="org.quartz.jobStore.clusterCheckinInterval">20000</prop>
				
				<prop key="org.quartz.scheduler.classLoadHelper.class">org.quartz.simpl.CascadingClassLoadHelper</prop> 
				<prop key="org.quartz.jobStore.lockHandler.class">org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore</prop> 
				<prop key="org.quartz.jobStore.lockHandler.updateLockRowSQL">UPDATE QRTZ_LOCKS SET LOCK_NAME = LOCK_NAME WHERE LOCK_NAME = ?</prop>
			</props>
		</property>
	</bean>
	
	
	
	<!--(嵌入配置)activeMq消息容器-->
    <amq:broker useJmx="true" persistent="true">
    	<amq:persistenceAdapter>
            <amq:kahaDB directory="${jmsDir}" ></amq:kahaDB>
        </amq:persistenceAdapter>
    	<amq:managementContext>
    	    <amq:managementContext createConnector="false"/>
    	</amq:managementContext>
         <amq:transportConnectors>
			<amq:transportConnector uri="tcp://${jms.ip}:${jms.port}" />
		</amq:transportConnectors>
    </amq:broker>
  
  	<!-- 消息工厂连接池 -->
   	<bean id="simpleJmsConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
	  destroy-method="stop">
		<property name="connectionFactory">
			<bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<property name="brokerURL" value="vm://${jms.ip}" />
			</bean>
		</property>
		<property name="maxConnections" value="10"></property>
	</bean>
	
    <!--  Message 转换器  -->
    <bean id="activeMqMessageConverter" class="com.xplatform.base.system.message.jms.converter.ActiveMqMessageConverter"/>
    
    <!--  Spring Jms模板 -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory">
            <bean class="org.springframework.jms.connection.SingleConnectionFactory">
                <!-- 采用普通jms连接工厂 -->
                <property name="targetConnectionFactory" ref="simpleJmsConnectionFactory"/>
            </bean>
        </property>
        <property name="messageConverter" ref="activeMqMessageConverter"/>
    </bean>
    
    <!-- 消息对象队列  -->
    <amq:queue id="messageQueue" name="messageQueue" physicalName="messageQueue" />
    <!-- 消息生产者   	-->
    <bean id="messageProducer" class="com.xplatform.base.system.message.jms.producer.MessageProducer"/>
  
    <!-- 
    	消息消费者 
    	map配置的是队列中消息处理类。
    	键：队列中消息类 对应的类 全路径 如：com.xplatform.base.system.message.jms.model.MailModel
    	值：消息处理类,需要实现接口类IJmsHandler 。如：com.xplatform.base.system.message.jms.handler.impl.MailHandler 
    	用户也可以配置自己的处理方式，配置到这里。
     -->   
    
    <bean name="messageConsumer" class="com.xplatform.base.system.message.jms.consumer.MessageConsumer">
		<property name="handlers">
			<map>
				<entry  key="com.xplatform.base.system.message.jms.model.MailModel">
					<bean class="com.xplatform.base.system.message.jms.handler.impl.MailHandler"></bean>
				</entry>
				<entry  key="com.xplatform.base.system.message.jms.model.SmsModel">
					<bean class="com.xplatform.base.system.message.jms.handler.impl.SmsHandler"></bean>
				</entry>
				<entry  key="com.xplatform.base.system.message.jms.model.InnerModel">
					<bean class="com.xplatform.base.system.message.jms.handler.impl.InnerHandler"></bean>
				</entry>
				<entry  key="com.xplatform.base.system.message.jms.model.IMModel">
					<bean class="com.xplatform.base.system.message.jms.handler.impl.IMHandler"></bean>
				</entry>
				<entry  key="com.xplatform.base.system.message.jms.model.PushModel">
					<bean class="com.xplatform.base.system.message.jms.handler.impl.PushHandler"></bean>
				</entry>
			</map>
		</property> 
    </bean>
   
    <!-- 邮件消息消费监听器  --> 
	<bean id="messageMsgListener" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
		<constructor-arg>
			<ref bean="messageConsumer"/>		
		</constructor-arg>
		<property name="messageConverter" ref="activeMqMessageConverter" />
		<property name="defaultListenerMethod" value="sendMessage" />
	</bean>
	
	<!--消息监听容器 --> 
	<bean id="messageListenerContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="simpleJmsConnectionFactory" />
		<property name="destination" ref="messageQueue" />
		<property name="messageListener" ref="messageMsgListener" />
	</bean>

</beans>	