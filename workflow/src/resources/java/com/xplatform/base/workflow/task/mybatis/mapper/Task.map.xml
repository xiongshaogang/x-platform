<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="com.xplatform.base.workflow.task.mybatis.dao.TaskDao">

  	<resultMap id="taskResultMap" type="ProcessTaskVo">
		   <id property="id" column="ID_" jdbcType="VARCHAR"/>
		   <result property="revision" column="REV_" jdbcType="INTEGER"/>
		   <result property="name" column="NAME_" jdbcType="VARCHAR"/>
		   <result property="parentTaskId" column="PARENT_TASK_ID_" jdbcType="VARCHAR"/>
		   <result property="description" column="DESCRIPTION_" jdbcType="VARCHAR"/>
		   <result property="priority" column="PRIORITY_" jdbcType="INTEGER"/>
		   <result property="createTime" column="CREATE_TIME_"/>
		   <result property="owner" column="OWNER_" jdbcType="VARCHAR"/>
		   <result property="assignee" column="ASSIGNEE_" jdbcType="VARCHAR"/>
		   <result property="delegationState" column="DELEGATION_" jdbcType="VARCHAR"/>
		   <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
		   <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
		   <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR"/>
		   <result property="taskDefinitionKey" column="TASK_DEF_KEY_" jdbcType="VARCHAR"/>
		   <result property="dueDate" column="DUE_DATE_" jdbcType="TIMESTAMP"/>
		   <result property="subject" column="subject" jdbcType="VARCHAR"/>
		   <result property="processName" column="processName" jdbcType="VARCHAR"/>
		   <result property="allowDivert" column="allowDivert" jdbcType="NUMERIC"/>
		   <result property="ischeck" column="ischeck" jdbcType="NUMERIC"/>
		   <result property="defId" column="defId" jdbcType="NUMERIC"/>
		   <result property="runId" column="runId" jdbcType="NUMERIC"/>
		   <result property="allowBatchApprove" column="allowBatchApprove" jdbcType="NUMERIC"/>
		   <result property="typeName" column="typeName" jdbcType="VARCHAR"/>
		   <result property="orgName" column="orgName" jdbcType="VARCHAR"/>
		   <result property="tagIds" column="tagIds" jdbcType="VARCHAR" />
		   <result property="creatorId" column="CREATE_USER_ID_" jdbcType="VARCHAR" />
		   <result property="creator" column="CREATE_USER_NAME_" jdbcType="VARCHAR" />
		   <result property="hasRead" column="IS_READ_" jdbcType="VARCHAR" />
		   <result property="taskStatus" column="taskStatus" jdbcType="NUMERIC"/>  
		   <result property="groupId" column="groupId" jdbcType="VARCHAR" />
	  </resultMap>
	
	  <insert id="add" parameterType="ProcessTaskVo">
	    insert into ACT_RU_TASK (ID_, REV_, NAME_, PARENT_TASK_ID_, DESCRIPTION_, PRIORITY_, CREATE_TIME_, OWNER_,
	                      ASSIGNEE_, DELEGATION_, EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_KEY_, DUE_DATE_)
	    values (#{id, jdbcType=VARCHAR},
	            1,
	            #{name, jdbcType=VARCHAR},
	            #{parentTaskId, jdbcType=VARCHAR},
	            #{description, jdbcType=VARCHAR},
	            #{priority, jdbcType=INTEGER},
	            #{createTime, jdbcType=TIMESTAMP},
	            #{owner, jdbcType=VARCHAR},
	            #{assignee, jdbcType=VARCHAR},
	            #{delegationState, jdbcType=VARCHAR},
	            #{executionId, jdbcType=VARCHAR},
	            #{processInstanceId, jdbcType=VARCHAR},
	            #{processDefinitionId, jdbcType=VARCHAR},
	            #{taskDefinitionKey, jdbcType=VARCHAR},
	            #{dueDate, jdbcType=TIMESTAMP}
	           )
	  </insert>
	 <update id="updTaskExecution" parameterType="string">
		 update act_ru_task set execution_id_ =PROC_INST_ID_ where id_=#{id, jdbcType=VARCHAR}
	</update> 
  
	<update id="setDueDate" parameterType="hashmap">
		update ACT_RU_TASK set DUE_DATE_=#{dueDate} where ID_=#{taskId}
	</update>
	<select id="getAllByPage" parameterType="Page" resultMap="taskResultMap">
		SELECT task.*,
			   run.title subject,
	           run.business_name businessName,
	           def.name processName
		FROM ACT_RU_TASK task
		LEFT JOIN t_flow_task_read tread ON task.id_ =tread.task_id
        LEFT JOIN t_flow_instance run ON task.PROC_INST_ID_ = run.act_inst_id
        LEFT JOIN t_flow_definition def on task.PROC_DEF_ID_=def.act_id
        left join t_org_user u on task.ASSIGNEE_=u.id
		where 1=1 and def.status='Y' and def.is_publish='Y'
		<!-- 
		<if test="@Ognl@isNotEmpty(id)"> AND task.id_ LIKE #{id} </if>
		<if test="@Ognl@isNotEmpty(name)"> AND task.name_ LIKE #{name} </if>
		<if test="@Ognl@isNotEmpty(subject)"> AND run.subject LIKE #{subject} </if>
		<if test="@Ognl@isNotEmpty(processName)"> AND run.processName LIKE #{processName} </if>
		<if test="@Ognl@isEmpty(orderField)">
			order by task.CREATE_TIME_ desc
		</if>
		<if test="@Ognl@isNotEmpty(orderField)">
			order by ${orderField} ${orderSeq}
		</if>
		 -->		
	</select>

	
	<!-- 待办事宜  修改该方法 我的待办事宜任务数 getAllMyTaskCount -->
	<select id="getAllMyTaskByPage" parameterType="Page" resultMap="taskResultMap">
		 select DISTINCT tmp.*, run.title subject,run.business_name businessName,run.business_key businesskey,run.groupId groupId,def.name processName
		 from(SELECT task.* <!-- 一个用户 -->
	           FROM ACT_RU_TASK task
	           WHERE task.ASSIGNEE_ = #{parameter.userId} and task.DESCRIPTION_!='39'
	           UNION
	           SELECT task.*  <!-- 候选人-->
	            FROM ACT_RU_TASK task
	            	JOIN act_ru_identitylink ident ON task.id_ = ident.TASK_ID_
	            WHERE task.ASSIGNEE_ =0 and ident.USER_ID_ =#{parameter.userId} and ident.type_='candidate' and task.DESCRIPTION_!='39' 
                UNION
	            SELECT task.*   <!-- 组织机构-->
             	FROM ACT_RU_TASK task
             	  JOIN act_ru_identitylink ident ON task.id_ = ident.TASK_ID_
            	WHERE ident.type_ = 'org' and #{parameter.userId} in (select uo.userId from t_org_orgnaization o, t_org_user_org uo  where uo.orgId=o.id and o.treeIndex like ident.group_id_)
                      and task.ASSIGNEE_ =0 and task.DESCRIPTION_!='39'
                UNION
	            SELECT task.*   <!-- 角色-->
             	FROM ACT_RU_TASK task
             	    JOIN act_ru_identitylink ident ON task.id_ = ident.TASK_ID_
            	WHERE ident.type_ = 'role' and ident.group_id_ in (select distinct m.id from t_org_role m,t_org_user_role ur where ur.userId=#{parameter.userId})
                	and task.ASSIGNEE_ =0 and task.DESCRIPTION_!='39')tmp
          LEFT JOIN t_flow_instance run ON tmp.PROC_INST_ID_ = run.act_inst_id
	      LEFT JOIN t_flow_definition def on tmp.PROC_DEF_ID_=def.act_id
	      where def.status='Y' and def.is_publish='Y'
	      order by tmp.CREATE_TIME_ desc
	</select>
	
	
	<select id="getMyMobileTask" parameterType="hashmap" resultMap="taskResultMap">
		select * from(
			SELECT  task.*,run.subject subject,run.processName processName
			FROM ACT_RU_TASK task 
			left join BPM_PRO_RUN run     on task.PROC_INST_ID_=run.actInstId
			where task.ASSIGNEE_ = #{userId} 
			union all
			SELECT  task.*,run.subject subject,run.processName processName
			FROM ACT_RU_TASK task 
			left join BPM_PRO_RUN run     on task.PROC_INST_ID_=run.actInstId
			left join act_ru_identitylink ident on task.id_=ident.TASK_ID_  
			where ident.USER_ID_ = #{userId} and task.ASSIGNEE_ =0 
		)
		 result 
		 <!-- 
		<where>
			<if test="@Ognl@isNotEmpty(subject)"> AND subject LIKE #{subject} </if>
		</where>
		<if test="@Ognl@isEmpty(orderField)">
				order by CREATE_TIME_ desc
		</if>
		 -->
	</select>
	
	
	
	<select id="getAllMyEvent" parameterType="hashmap" resultMap="taskResultMap">
		SELECT distinct task.*,run.subject subject,run.processName processName
		FROM ACT_RU_TASK task left join BPM_PRO_RUN run
		on task.PROC_INST_ID_=run.actInstId
        left join act_ru_identitylink ident 
        on task.id_=ident.TASK_ID_
		where (task.ASSIGNEE_ = #{userId} 
		or ( (task.ASSIGNEE_ is NULL) and ( task.OWNER_ = #{userId} or ident.USER_ID_ = #{userId})))
		AND ((task.CREATE_TIME_ >= #{startDate} AND task.CREATE_TIME_ &lt;= #{endDate}) 
    	OR (task.DUE_DATE_ >= #{startDate} and task.DUE_DATE_ &lt;= #{endDate})) 
		ORDER BY task.CREATE_TIME_ 
		
	</select>
	
	<select id="getReminderTask"  resultMap="taskResultMap">
		select * from ACT_RU_TASK a where exists (select 1 from t_flow_task_due b where a.proc_def_id_=b.act_id and a.task_def_key_=b.node_id)
	</select>
	
	<select id="getTasksByRunId" parameterType="string" resultMap="taskResultMap">
		SELECT task.*,run.subject subject,run.processName processName
		FROM ACT_RU_TASK task left join BPM_PRO_RUN run
		ON task.PROC_INST_ID_=run.actInstId
		where run.runId=#{runId}
	</select>
	
	
	<select id="getByTaskNameOrTaskIds" parameterType="hashmap" resultMap="taskResultMap">
		SELECT distinct task.*,run.subject subject,run.processName processName
		FROM ACT_RU_TASK task left join BPM_PRO_RUN run
		ON task.PROC_INST_ID_=run.actInstId
		where task.ASSIGNEE_ = #{userId} and ( task.NAME_ like #{taskName} or  task.ID_ in (${taskIds}))
		order by task.CREATE_TIME_ desc
	</select>
	
	<update id="updateTaskAssignee">
		update ACT_RU_TASK set ASSIGNEE_=#{userId} where ID_=#{taskId}
	</update>
	
	<update id="updateTaskDescription">
		update ACT_RU_TASK set DESCRIPTION_=#{description} where ID_=#{taskId}
	</update>
	
	<update id="updateTaskAssigneeNull">
		update ACT_RU_TASK set ASSIGNEE_=null where ID_=#{taskId}
	</update>
	<!-- update the task definition key to new key -->
	<update id="updateNewTaskDefKeyByInstIdNodeId">
		update ACT_RU_TASK set TASK_DEF_KEY_=#{newTaskDefKey} where PROC_INST_ID_=#{actInstId} and TASK_DEF_KEY_=#{oldTaskDefKey}
	</update>
	
	<update id="updateOldTaskDefKeyByInstIdNodeId">
		update ACT_RU_TASK set TASK_DEF_KEY_=#{oldTaskDefKey} where PROC_INST_ID_=#{actInstId} and TASK_DEF_KEY_ like #{newTaskDefKey}
	</update>
	
	<select id="updateTaskOwner">
		update ACT_RU_TASK set OWNER_=#{userId} where ID_=#{taskId}
	</select>
	
	<select id="getByTaskId" resultMap="taskResultMap">
		SELECT distinct task.*,run.title subject,run.def_name processName FROM ACT_RU_TASK task left join t_flow_instance run ON task.PROC_INST_ID_=run.act_inst_id where task.ID_=#{taskId}
	</select>
	
	<select id="getByInstanceId" resultMap="taskResultMap">
		SELECT * FROM ACT_RU_TASK task where  task.PROC_INST_ID_=#{instanceId} and EXECUTION_ID_ >0
	</select>

	<delete id="delByInstanceId">
		DELETE FROM ACT_RU_TASK  where PROC_INST_ID_=#{instanceId}
	</delete>
	
	<delete id="delCandidateByInstanceId">
		delete from act_ru_identitylink  where task_id_ in(  select a.id_ from    ACT_RU_TASK  a where a.PROC_INST_ID_=#{instanceId})
	</delete>
	
	<delete id="delById">
		DELETE FROM ACT_RU_TASK  where ID_=#{id}
	</delete>
	
	<delete id="delByActDefId">
		DELETE FROM ACT_RU_TASK  where PROC_DEF_ID_=#{actDefId}
	</delete>
	
	<delete id="delCandidateByActDefId">
		delete from act_ru_identitylink  where task_id_ in(  select a.id_ from    ACT_RU_TASK  a where a.PROC_DEF_ID_=#{actDefId})
	</delete>
	
	<select id="getHasCandidateExecutor" resultType="java.util.HashMap">
		SELECT COUNT(*) AMOUNT,t.task_id_ TASKID FROM act_ru_identitylink t  where t.task_id_ in (${taskIds}) group by t.task_id_ 		
	</select>
	
	<!-- 取得某人是否有任务的的参与权限 -->
	<select id="getHasRightsByTask" parameterType="hashmap" resultType="java.lang.Integer" >
		select count(*) from(
			select task.id_ FROM ACT_RU_TASK task  <!-- 用户 -->
			where task.id_=#{taskId}   and task.ASSIGNEE_ =#{userId}
			union all
			select task.id_ FROM ACT_RU_TASK task   <!--候选人-->
			join act_ru_identitylink ident 
				on task.id_=ident.TASK_ID_
			where task.id_=#{taskId}   and
			ident.USER_ID_ =#{userId} and task.ASSIGNEE_ =0 
			union all
			select task.id_ FROM ACT_RU_TASK task <!-- 组织机构-->
			join act_ru_identitylink ident 
				on task.id_=ident.TASK_ID_
			where 
				task.id_=#{taskId} 
				and ident.type_ ='org' and #{userId} in (select uo.userId from t_org_orgnaization o, t_org_user_org uo  where uo.orgId=o.id and o.treeIndex like ident.group_id_)
			union all
			select task.id_ FROM ACT_RU_TASK task <!-- 角色 -->
			join act_ru_identitylink ident on task.id_=ident.TASK_ID_
			where task.id_=#{taskId}
			     and ident.type_ ='role' and ident.group_id_  in (select distinct m.id from t_org_role m,t_org_user_role ur where ur.userId=#{userId})
		)
		 result
	</select>
	
	<update id="updateTask">
		update ACT_RU_TASK set ASSIGNEE_=#{userId},DESCRIPTION_=#{description}, CREATE_TIME_=#{updateTime} where ID_=#{taskId}
	</update>
	<!-- 删除指定人某个节点的沟通任务 -->
	<delete id="delCommuTaskByInstNodeUser" >
		delete from ACT_RU_TASK  where proc_inst_id_=#{instInstId} and task_def_key_=#{nodeId} and assignee_=#{userId}
		and  description_='15'
	</delete>
	
	<!--删除转办代理的候选人 -->
	<delete id="delDelegateUser" >
		delete from ACT_RU_IDENTITYLINK  where TASK_ID_=#{taskId}
	</delete>
	
<!-- 删除某个任务的沟通任务 -->
	<delete id="delCommuTaskByParentTaskId" >
		delete from ACT_RU_TASK where ACT_RU_TASK.parent_task_id_=#{parentTaskId} and  ACT_RU_TASK.description_='15'
	</delete>
		
	<!-- 删除指定parentTaskId的流转任务 -->
	<delete id="delTransToTaskByParentTaskId" >
		delete from ACT_RU_TASK where ACT_RU_TASK.parent_task_id_=#{parentTaskId} and  ACT_RU_TASK.description_='38'
	</delete>
	
	<select id="getByInstanceIdTaskDefKey" resultMap="taskResultMap">
		SELECT * FROM ACT_RU_TASK task where  task.PROC_INST_ID_=#{instanceId} and task.TASK_DEF_KEY_ =#{taskDefKey} and task.description_ ='-1'  and task.parent_task_id_ is null 
	</select>
	
	<select id="getByParentTaskIdAndDesc" parameterType="hashmap" resultMap="taskResultMap">
		SELECT * FROM ACT_RU_TASK task where task.description_ =#{description}  and task.parent_task_id_ =#{parentTaskId} 
	</select>
	
	<select id="getMyEndTaskByPage" parameterType="Page" resultMap="taskResultMap">
		select opin.task_id id,opin.task_key TASK_DEF_KEY_,opin.task_name name, d.name processName,d.act_id processDefinitionId,inst.act_inst_id processInstanceId,inst.title subject,inst.business_name businessName,opin.end_time createTime,inst.createUserId creator,opin.dur_time duration
	    from 
			(select *from t_flow_task_opinion o where o.exe_user_id=#{parameter.userId} and o.check_status!='-1') opin
		join t_flow_definition d on opin.act_id=d.act_id
		join t_flow_instance_history inst on opin.act_instance_id=inst.act_inst_id
		where d.status='Y' and ( inst.status = '2' or inst.status = '3' )
		ORDER BY opin.${orderBy} ${order}
	</select>
	
	<select id="getMyCompleteTaskByPage" parameterType="Page" resultMap="taskResultMap">
		select inst.groupId,opin.task_id id,opin.task_key TASK_DEF_KEY_,opin.task_name name, d.name processName,d.act_id processDefinitionId,inst.act_inst_id processInstanceId, inst.title subject,inst.business_name businessName,inst.business_key businessKey,opin.end_time createTime,inst.createUserId creator,opin.dur_time duration
		from 
			(select *from t_flow_task_opinion o where o.exe_user_id=#{parameter.userId} and o.check_status!='-1') opin
		join t_flow_definition d on opin.act_id=d.act_id
		join t_flow_instance_history inst on opin.act_instance_id=inst.act_inst_id
		where d.status='Y'
		ORDER BY opin.${orderBy} ${order} 
	</select>
	
	<update id="setTaskUser" parameterType="hashmap">
		UPDATE ACT_RU_TASK SET
		CREATE_USER_ID_=#{userId,jdbcType=VARCHAR}, 
		CREATE_USER_NAME_=#{userName,jdbcType=VARCHAR},
		IS_READ_='0'
		where ID_=#{id}
	</update>
	<update id="setRead" parameterType="hashmap">
		UPDATE ACT_RU_TASK SET
		IS_READ_=#{isRead,jdbcType=VARCHAR}
		where ID_=#{id}
	</update>
</mapper>
